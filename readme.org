* lem.el

=lem.el= is an Emacs client library and interface for Lemmy, the federated
link-aggregator. For information about Lemmy, see [[http://joinlemmy.org][joinlemmy.org]].

=lem-api.el= is the API requests layer. All functions make requests and return
JSON data pased into Elisp.

The idea is that it's then possible to write different frontends so users can
read lemmy posts in whatever forms they like. Possibilities are notmuch, gnus,
md4rd, elfeed, or a standalone rendering option more like =mastodon.el=.

Most endpoints are implemented, as are most parameters for each endpoint.
There is an active todo list in =lem-api.el=.

New endpoints are trivial to add with the =lem-def-request= macro.

=lem-ui.el= is our own interface layer. It takes inspiration and code from
=mastodon.el=, as that's what I know, and a lot of work has gone into it.

* install

=lem.el= is on MELPA, so you can install it from there.

Add =MELPA= to your archives:

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
#+END_SRC

Update and install:

=M-x package-refresh-contents RET=

=M-x package-install RET lem RET=

Otherwise you can pull from this repo, main or develop.

* logging in

First set =lem-instance-url= to your lemmy instance.

Then the first time you call =lem= you'll be asked for your username and
password. Upon logging in, your authentication details will be saved in a
plstore under your emacs directory. You "shouldn't" have to provide your
password again (unless server-side updates require new login). If you don't
want to have to provide your username, add =(setq lem-current-user
"yourusername")= to your init file.

* NB: API instability

The Lemmy developers have clearly stated that the current API version, v3, is
unstable and will likely be subject to breaking changes. This will mean =lem.el=
will have to play catch-up as things change.

* dependencies

=lem.el= depends on [[https://codeberg.org/martianh/fedi.el][fedi.el]], a library to make writing a library of API requests
easier. It also depends on [[https://github.com/jrblevin/markdown-mode][markdown-mode]], and on =hierarchy.el=, which should be
included in your emacs.

* contributions

Contributions are welcome. Open an issue to explain if you're working on
something, and if you want to work on =lem-ui.el= make sure that what you're
doing can't just be pulled in from =mastodon.el= to save work.

Also feel free to get in touch if you want to use =lem-api.el= to build another frontend.

* Supporting =lem.el=

If you'd like to support continued development of =lem.el=, I accept donations
via paypal: [[https://paypal.me/martianh][paypal.me/martianh]]. If you would prefer a different payment
method, please write to me at <martianhiatus [at] riseup [dot] net> and I can
provide IBAN or other bank account details.

I don't have a tech worker's income, so even a small tip would help out.

* screenshots

[[file:lem.png][file:./lem.png]]

[[file:./lem-post.png][file:./lem-post.png]]

* commands index
#+BEGIN_SRC emacs-lisp :results table :colnames '("Binding" "Command" "Description") :exports results
  (let ((rows))
    (mapatoms
     (lambda (symbol)
       (when (and (string-match "^lem"
                                (symbol-name symbol))
                  (commandp symbol))
         (let* ((doc (car
                      (split-string
                       (or (documentation symbol t) "")
                       "\n")))
                ;; add more keymaps here
                ;; some keys are in sub 'keymap keys inside a map
                (maps (list lem-mode-map lem-post-mode-map lem-post-comment-mode-map))
                (binding-code
                 (let ((keys (where-is-internal symbol maps nil nil (command-remapping symbol))))
                   ;; just take first 2 bindings:
                   (if (> (length keys) 2)
                       (list (car keys) (cadr keys))
                     keys)))
                (binding-str (if binding-code
                                 (mapconcat #'help--key-description-fontified
                                            binding-code ", ")
                               "")))
           (push `(,binding-str ,symbol ,doc) rows)
           rows))))
    (sort rows (lambda (x y) (string-lessp (cadr x) (cadr y)))))
#+END_SRC

#+RESULTS:
| Binding   | Command                                | Description                                                        |
|-----------+----------------------------------------+--------------------------------------------------------------------|
|           | lem                                    | Open lem, a Lemmy client.                                          |
| C-M-q     | lem-kill-all-buffers                   | Kill all lem.el buffers.                                           |
|           | lem-login-set-token                    | Login and set current user details.                                |
|           | lem-mode                               | Major mode for Lemmy, the federated link-aggregator and forum.     |
| n         | lem-next-item                          | Move to next item.                                                 |
| C-c C-k   | lem-post-cancel                        | Kill new-post buffer/window. Does not POST content.                |
| r         | lem-post-comment                       | Reply to a post or comment.                                        |
|           | lem-post-comment-mode                  | Minor mode for submitting comments to lemmy.                       |
|           | lem-post-comment-simple                | Reply to post or comment at point.                                 |
| N         | lem-post-compose                       | Compose a new post.                                                |
|           | lem-post-compose-simple                | Create and submit new post, reading strings in the minibuffer.     |
|           | lem-post-mode                          | Minor mode for submitting posts to lemmy.                          |
| C-c C-t   | lem-post-read-title                    | Read post title.                                                   |
| C-c C-u   | lem-post-read-url                      | Read post URL.                                                     |
| C-c C-o   | lem-post-select-community              | Select community to post to.                                       |
| C-c C-l   | lem-post-set-post-language             | Prompt for a language and set `fedi-post-language'.                |
|           | lem-post-submit                        | Submit the post to lemmy.                                          |
| C-c C-n   | lem-post-toggle-nsfw                   | Toggle `fedi-post-content-nsfw'.                                   |
| p         | lem-prev-item                          | Move to prev item.                                                 |
|           | lem-ui--follow-link-at-point           | Follow link at point.                                              |
|           | lem-ui-block-user                      | Block author of item at point.                                     |
|           | lem-ui-choose-listing-type             | Prompt for a listing type, and use it to reload current view.      |
| o         | lem-ui-choose-sort                     | Prompt for a sort type, and use it to reload the current view.     |
|           | lem-ui-copy-item-url                   | Copy the URL (ap_id) of the post or comment at point.              |
| C-c C-c   | lem-ui-cycle-listing-type              | Cycle view between `lem-listing-types'.                            |
| C-c C-s   | lem-ui-cycle-sort                      | Cycle view between some `lem-sort-types'.                          |
|           | lem-ui-delete-comment                  | Delete comment at point.                                           |
|           | lem-ui-delete-community                | Delete community at point.                                         |
|           | lem-ui-delete-post                     | Delete post at point.                                              |
| d         | lem-ui-delete-post-or-comment          | Delete post or comment at point.                                   |
|           | lem-ui-dislike-item                    | Dislike (downvote) item at point.                                  |
| e         | lem-ui-edit-comment                    | Edit comment at point if possible.                                 |
|           | lem-ui-jump-to-moderated               | Prompt for a subscribed community and view it.                     |
| s         | lem-ui-jump-to-subscribed              | Prompt for a subscribed community and view it.                     |
|           | lem-ui-like-item                       | Like (upvote) item at point.                                       |
| l         | lem-ui-like-item-toggle                | Toggle like status of item at point.                               |
|           | lem-ui-mark-all-read                   | Mark all replies as read.                                          |
|           | lem-ui-mark-private-message-read       | Mark the private message at point as read.                         |
|           | lem-ui-mark-reply-comment-read         | Mark the comment-reply at point as read.                           |
|           | lem-ui-message-user-at-point           | Send private message to user at point.                             |
|           | lem-ui-more                            | Append more items to the current view.                             |
| TAB       | lem-ui-next-tab-item                   | Jump to next tab item.                                             |
| <backtab> | lem-ui-prev-tab-item                   | Jump to prev tab item.                                             |
|           | lem-ui-restore-post                    | Restore deleted post at point.                                     |
|           | lem-ui-save-item                       | Save item at point.                                                |
| a         | lem-ui-save-item-toggle                | Toggle saved status of item at point.                              |
| SPC       | lem-ui-scroll-up-command               | Call `scroll-up-command', loading more toots if necessary.         |
| h         | lem-ui-search                          | Do a search for objects of one of the types in `lem-search-types'. |
|           | lem-ui-subscribe-to-community          | Subscribe to a community, using ID or prompt for a handle.         |
| S         | lem-ui-subscribe-to-community-at-point | Subscribe to community at point.                                   |
| C-c C-v   | lem-ui-toggle-posts-comments           | Switch between displaying posts or comments.                       |
|           | lem-ui-unlike-item                     | Unlike item at point.                                              |
|           | lem-ui-unsave-item                     | Unsave item at point.                                              |
|           | lem-ui-unsubscribe-from-community      | Prompt for a subscribed community and unsubscribe from it.         |
|           | lem-ui-url-lookup                      | Perform a webfinger lookup on URL and load the result in `lem.el'. |
|           | lem-ui-view-comment-post               | View post of comment at point, or of POST-ID.                      |
| C         | lem-ui-view-communities                | View Lemmy communities.                                            |
|           | lem-ui-view-communities-tl             | View Lemmy communities in a tabulated list.                        |
|           | lem-ui-view-community-at-point         | View community at point.                                           |
| I         | lem-ui-view-instance                   | View posts of current user's home instance.                        |
|           | lem-ui-view-instance-full              | View full instance details.                                        |
| c         | lem-ui-view-item-community             | View community of item at point.                                   |
| u         | lem-ui-view-item-user                  | View user of item at point.                                        |
|           | lem-ui-view-mentions                   | View reply comments to the current user.                           |
| O         | lem-ui-view-own-profile                | View profile of the current user.                                  |
|           | lem-ui-view-post-at-point              | View post at point.                                                |
|           | lem-ui-view-private-messages           | View reply comments to the current user.                           |
|           | lem-ui-view-replies                    | View reply comments to the current user.                           |
|           | lem-ui-view-replies-unread             | View unread replies.                                               |
| A         | lem-ui-view-saved-items                | View saved items of the current user, or of user with ID.          |
| RET       | lem-ui-view-thing-at-point             | View post, community or user at point.                             |
| P         | lem-ui-view-user-at-point              | View user at point.                                                |
|           | lem-vtable-revert-command              | Re-query data and regenerate the table under point.                |
|           | lem-vtable-sort-by-current-column      | Sort the table under point by the column under point.              |
