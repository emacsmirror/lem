* lem.el

=lem.el= is an Emacs client library and interface for Lemmy, the federated link-aggregator. For information about Lemmy, see [[http://joinlemmy.org][joinlemmy.org]].

=lem-api.el= is the API requests layer. All functions make requests and return JSON data pased into Elisp.

The idea is that it's then possible to write different frontends so users can read lemmy posts in whatever forms they like. Possibilities are notmuch, gnus, md4rd, elfeed, or a standalone rendering option more like =mastodon.el=.

Currently, most of the basic endpoints are implemented, and most but not all parameters for each endpoint. There is an active todo list of endpoints in =lem-api.el=.

New endpoints are trivial to add with the =lem-def-request= macro.

=lem-ui.el= is our own basic interface layer. It's new and a bit necro, but coming along fast. It takes some inspiration and code from =mastodon.el=, as that's what I know, and a lot of work has gone into it.

* logging in

Currently, you first need to set =lem-instance-url= to your lemmy instance.

Then the first time you call =lem= you'll be asked for your username and password. Upon logging in, your authentication details will be saved in a plstore under your emacs directory. You "shouldn't" have to provide your password again. If you don't want to have to provide your username, add =(setq lem-current-user "yourusername")= to your init file.

* NB: API instability

The Lemmy developers have clearly stated that the current API version, v3, is unstable and will likely be subject to breaking changes. This will mean =lem.el= will have to play catch-up as things change.

* dependencies

=lem.el= depends on [[https://codeberg.org/martianh/fedi.el][fedi.el]], a library to make writing a library of API requests easier. It also depends on [[https://github.com/jrblevin/markdown-mode][markdown-mode]], and on =hierarchy.el=, which should be included in your emacs.

* contributions

Contributions are welcome. Open an issue to explain if you're working on something, and if you want to work on =lem-ui.el= make sure that what you're doing can't just be pulled in from =mastodon.el= to save work.

Also feel free to get in touch if you want to use =lem-api.el= to build another frontend.

* UI TODOS doing

- [ ] update current buffer with new items (less important than in masto)
  
* UI TODOS done

- [X] rich compose interface (from mastodon.el)
- [X] timestamp logic (from mastodon.el)
- [X] image loading
- [X] tabstop navigation logic (from mastodon.el)
- [X] webfinger lookup bindings for all links
- [X] finish pagination/add older items to buffer
- [X] =lem.plstore= for auth token
- [X] webfinger lookups
- [X] proper buffer naming/separation
- [X] view saved posts
- [X] comment threads (uwu!)
- [X] finish cycling of views by sort/listing-type
- [X] view instance
- [X] list communities
- [X] view community
- [X] view user
- [X] list users
- [X] view post and comments
- [X] adjust listing type and sort for current view
- [X] buffer macro
- [X] simple reply
- [X] simple private message
- [X] subscribe to community
- [X] jump to subscribed community
- [X] search by type: user, community, post, comment, all
- [X] prev/next item
- [X] render post/comment body as markdown
- [X] generic like/dislike cmds
- [X] "save" items [bookmarking]

* screenshot

[[file:lem.png][file:./lem.png]]

* lem commands index
#+BEGIN_SRC emacs-lisp :results table :colnames '("Binding" "Command" "Description") :exports results
  (let ((rows))
    (mapatoms
     (lambda (symbol)
       (when (and (string-match "^lem"
                                (symbol-name symbol))
                  (commandp symbol))
         (let* ((doc (car
                      (split-string
                       (or (documentation symbol t) "")
                       "\n")))
                ;; add more keymaps here
                ;; some keys are in sub 'keymap keys inside a map
                (maps (list lem-mode-map lem-post-mode-map lem-post-comment-mode-map))
                (binding-code
                 (let ((keys (where-is-internal symbol maps nil nil (command-remapping symbol))))
                   ;; just take first 2 bindings:
                   (if (> (length keys) 2)
                       (list (car keys) (cadr keys))
                     keys)))
                (binding-str (if binding-code
                                 (mapconcat #'help--key-description-fontified
                                            binding-code ", ")
                               "")))
           (push `(,binding-str ,symbol ,doc) rows)
           rows))))
    (sort rows (lambda (x y) (string-lessp (cadr x) (cadr y)))))
#+END_SRC

#+RESULTS:
| Binding   | Command                                | Description                                                        |
|-----------+----------------------------------------+--------------------------------------------------------------------|
|           | lem                                    | Open lem, a Lemmy client.                                          |
|           | lem-login-set-token                    | Login and set current user details.                                |
|           | lem-mode                               | Major mode for Lemmy, the federated link-aggregator and forum.     |
| n         | lem-next-item                          | Move to next item.                                                 |
| C-c C-k   | lem-post-cancel                        | Kill new-post buffer/window. Does not POST content.                |
| r         | lem-post-comment                       | Reply to a post or comment.                                        |
|           | lem-post-comment-mode                  | Minor mode for submitting comments to lemmy.                       |
|           | lem-post-comment-simple                | Reply to post or comment at point.                                 |
| N         | lem-post-compose                       | Compose a new post.                                                |
|           | lem-post-compose-simple                | Create and submit new post, reading strings in the minibuffer.     |
|           | lem-post-mode                          | Minor mode for submitting posts to lemmy.                          |
| C-c C-t   | lem-post-read-title                    | Read post title.                                                   |
| C-c C-u   | lem-post-read-url                      | Read post URL.                                                     |
| C-c C-o   | lem-post-select-community              | Select community to post to.                                       |
| C-c C-l   | lem-post-set-post-language             | Prompt for a language and set `fedi-post-language'.                |
|           | lem-post-submit                        | Submit the post to lemmy.                                          |
| C-c C-n   | lem-post-toggle-nsfw                   | Toggle `fedi-post-content-nsfw'.                                   |
| p         | lem-prev-item                          | Move to prev item.                                                 |
|           | lem-ui--follow-link-at-point           | Follow link at point.                                              |
|           | lem-ui-choose-sort                     | Read a sort type and load it.                                      |
|           | lem-ui-choose-type                     | Read a listing type and load it.                                   |
|           | lem-ui-copy-item-url                   | Copy the URL (ap_id) of the post or comment at point.              |
| C-c C-c   | lem-ui-cycle-listing-type              | Cycle view between `lem-listing-types'.                            |
| C-c C-s   | lem-ui-cycle-sort                      | Cycle view between some `lem-sort-types'.                          |
|           | lem-ui-delete-comment                  | Delete comment at point.                                           |
|           | lem-ui-delete-post                     | Delete post at point.                                              |
|           | lem-ui-dislike-item                    | Dislike (downvote) item at point.                                  |
| e         | lem-ui-edit-comment                    | Edit comment at point if possible.                                 |
| s         | lem-ui-jump-to-subscribed              | Prompt for a subscribed community and view it.                     |
|           | lem-ui-like-item                       | Like (upvote) item at point.                                       |
| l         | lem-ui-like-item-toggle                | Toggle like status of item at point.                               |
|           | lem-ui-mark-all-read                   | Mark all replies as read.                                          |
|           | lem-ui-mark-private-message-read       | Mark the private message at point as read.                         |
|           | lem-ui-mark-reply-comment-read         | Mark the comment-reply at point as read.                           |
|           | lem-ui-message-user-at-point           | Send private message to user at point.                             |
|           | lem-ui-more                            | Append more items to the current view.                             |
| TAB       | lem-ui-next-tab-item                   | Jump to next tab item.                                             |
| <backtab> | lem-ui-prev-tab-item                   | Jump to prev tab item.                                             |
|           | lem-ui-restore-post                    | Restore deleted post at point.                                     |
|           | lem-ui-save-item                       | Save item at point.                                                |
| a         | lem-ui-save-item-toggle                | Toggle saved status of item at point.                              |
| SPC       | lem-ui-scroll-up-command               | Call `scroll-up-command', loading more toots if necessary.         |
|           | lem-ui-search                          | Do a search for one of the types in `lem-search-types'.            |
| S         | lem-ui-subscribe-to-community-at-point | Subscribe to community at point.                                   |
|           | lem-ui-unlike-item                     | Unlike item at point.                                              |
|           | lem-ui-unsave-item                     | Unsave item at point.                                              |
|           | lem-ui-unsubscribe-from-community      | Prompt for a subscribed community and unsubscribe from it.         |
|           | lem-ui-url-lookup                      | Perform a webfinger lookup on URL and load the result in `lem.el'. |
|           | lem-ui-view-comment-post               | View post of comment at point.                                     |
| C         | lem-ui-view-communities                | View Lemmy communities.                                            |
|           | lem-ui-view-community-at-point         | View community at point.                                           |
| I         | lem-ui-view-instance                   | View posts of current user's home instance.                        |
| c         | lem-ui-view-item-community             | View community of item at point.                                   |
| u         | lem-ui-view-item-user                  | View user of item at point.                                        |
|           | lem-ui-view-mentions                   | View reply comments to the current user.                           |
| O         | lem-ui-view-own-profile                | View profile of the current user.                                  |
|           | lem-ui-view-post-at-point              | View post at point.                                                |
|           | lem-ui-view-private-messages           | View reply comments to the current user.                           |
|           | lem-ui-view-replies                    | View reply comments to the current user.                           |
|           | lem-ui-view-replies-unread             | View unread replies.                                               |
| A         | lem-ui-view-saved-items                | View saved items of the current user, or of user with ID.          |
| RET       | lem-ui-view-thing-at-point             | View post, community or user at point.                             |
| P         | lem-ui-view-user-at-point              | View user at point.                                                |
